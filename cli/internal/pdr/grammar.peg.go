package pdr

// Code generated by peg -inline -switch grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleExpr
	ruleNOW
	rulePAST
	ruleFUTURE
	ruleEVERYTHING
	ruleNumber
	ruleYEARS
	ruleQUARTERS
	ruleMONTHS
	ruleWEEKS
	ruleLAST
	ruleCURRENT
	ruleTODATE
	ruleNEXT
	rule_
	ruleWhitespace
	ruleEOL
	ruleEOF
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	rulePegText
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Expr",
	"NOW",
	"PAST",
	"FUTURE",
	"EVERYTHING",
	"Number",
	"YEARS",
	"QUARTERS",
	"MONTHS",
	"WEEKS",
	"LAST",
	"CURRENT",
	"TODATE",
	"NEXT",
	"_",
	"Whitespace",
	"EOL",
	"EOF",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"PegText",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	currentTime time.Time
	start       time.Time
	end         time.Time
	number      int

	Buffer string
	buffer []rune
	rules  [54]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.start, p.end = boundsYear(p.currentTime)

		case ruleAction1:

			p.start, p.end = boundsQuarter(p.currentTime)

		case ruleAction2:

			p.start, p.end = boundsMonth(p.currentTime)

		case ruleAction3:

			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}

		case ruleAction4:

			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -3*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -3, 0)
			}

		case ruleAction5:

			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}

		case ruleAction6:

			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, 0, -7*(p.number-1))
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, 0, -7)
			}

		case ruleAction7:

			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}

		case ruleAction8:

			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 3*(p.number), 0)
			} else {
				p.start = p.start.AddDate(0, 3, 0)
				p.end = p.start.AddDate(0, 3, 0)
			}

		case ruleAction9:

			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}

		case ruleAction10:

			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 0, 7*p.number)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 0, 7)
			}

		case ruleAction11:

			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 - 1)

		case ruleAction12:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction13:
			p.number = 1
		case ruleAction14:
			p.number = 2
		case ruleAction15:
			p.number = 3
		case ruleAction16:
			p.number = 4
		case ruleAction17:
			p.number = 5
		case ruleAction18:
			p.number = 6
		case ruleAction19:
			p.number = 7
		case ruleAction20:
			p.number = 8
		case ruleAction21:
			p.number = 9
		case ruleAction22:
			p.number = 10
		case ruleAction23:
			p.number = 11
		case ruleAction24:
			p.number = 12
		case ruleAction25:
			p.number = 13
		case ruleAction26:
			p.number = 14
		case ruleAction27:
			p.number = 15
		case ruleAction28:
			p.number = 16
		case ruleAction29:
			p.number = 17
		case ruleAction30:
			p.number = 18
		case ruleAction31:
			p.number = 19
		case ruleAction32:
			p.number = 20

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Expr EOF)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					{
						switch buffer[position] {
						case 'a', 'e', 'f':
							{
								position4 := position
								{
									switch buffer[position] {
									case 'e':
										if buffer[position] != rune('e') {
											goto l0
										}
										position++
										if buffer[position] != rune('v') {
											goto l0
										}
										position++
										if buffer[position] != rune('e') {
											goto l0
										}
										position++
										if buffer[position] != rune('r') {
											goto l0
										}
										position++
										if buffer[position] != rune('y') {
											goto l0
										}
										position++
										if buffer[position] != rune('t') {
											goto l0
										}
										position++
										if buffer[position] != rune('h') {
											goto l0
										}
										position++
										if buffer[position] != rune('i') {
											goto l0
										}
										position++
										if buffer[position] != rune('n') {
											goto l0
										}
										position++
										if buffer[position] != rune('g') {
											goto l0
										}
										position++
									case 'f':
										if buffer[position] != rune('f') {
											goto l0
										}
										position++
										if buffer[position] != rune('o') {
											goto l0
										}
										position++
										if buffer[position] != rune('r') {
											goto l0
										}
										position++
										if buffer[position] != rune('e') {
											goto l0
										}
										position++
										if buffer[position] != rune('v') {
											goto l0
										}
										position++
										if buffer[position] != rune('e') {
											goto l0
										}
										position++
										if buffer[position] != rune('r') {
											goto l0
										}
										position++
									default:
										if buffer[position] != rune('a') {
											goto l0
										}
										position++
										if buffer[position] != rune('l') {
											goto l0
										}
										position++
										if buffer[position] != rune('l') {
											goto l0
										}
										position++
										if buffer[position] != rune(' ') {
											goto l0
										}
										position++
										if buffer[position] != rune('t') {
											goto l0
										}
										position++
										if buffer[position] != rune('i') {
											goto l0
										}
										position++
										if buffer[position] != rune('m') {
											goto l0
										}
										position++
										if buffer[position] != rune('e') {
											goto l0
										}
										position++
									}
								}

								if !_rules[rule_]() {
									goto l0
								}
								{
									add(ruleAction11, position)
								}
								add(ruleEVERYTHING, position4)
							}
						case 'n':
							{
								position7 := position
								{
									position8, tokenIndex8 := position, tokenIndex
									if !_rules[ruleNEXT]() {
										goto l9
									}
									{
										position10, tokenIndex10 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l10
										}
										goto l11
									l10:
										position, tokenIndex = position10, tokenIndex10
									}
								l11:
									if !_rules[ruleYEARS]() {
										goto l9
									}
									{
										add(ruleAction7, position)
									}
									goto l8
								l9:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleNEXT]() {
										goto l13
									}
									{
										position14, tokenIndex14 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l14
										}
										goto l15
									l14:
										position, tokenIndex = position14, tokenIndex14
									}
								l15:
									if !_rules[ruleQUARTERS]() {
										goto l13
									}
									{
										add(ruleAction8, position)
									}
									goto l8
								l13:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleNEXT]() {
										goto l17
									}
									{
										position18, tokenIndex18 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l18
										}
										goto l19
									l18:
										position, tokenIndex = position18, tokenIndex18
									}
								l19:
									if !_rules[ruleMONTHS]() {
										goto l17
									}
									{
										add(ruleAction9, position)
									}
									goto l8
								l17:
									position, tokenIndex = position8, tokenIndex8
									if !_rules[ruleNEXT]() {
										goto l0
									}
									{
										position21, tokenIndex21 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l21
										}
										goto l22
									l21:
										position, tokenIndex = position21, tokenIndex21
									}
								l22:
									if !_rules[ruleWEEKS]() {
										goto l0
									}
									{
										add(ruleAction10, position)
									}
								}
							l8:
								add(ruleFUTURE, position7)
							}
						case 'l', 'p':
							{
								position24 := position
								{
									position25, tokenIndex25 := position, tokenIndex
									if !_rules[ruleLAST]() {
										goto l26
									}
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l27
										}
										goto l28
									l27:
										position, tokenIndex = position27, tokenIndex27
									}
								l28:
									if !_rules[ruleYEARS]() {
										goto l26
									}
									{
										add(ruleAction3, position)
									}
									goto l25
								l26:
									position, tokenIndex = position25, tokenIndex25
									if !_rules[ruleLAST]() {
										goto l30
									}
									{
										position31, tokenIndex31 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l31
										}
										goto l32
									l31:
										position, tokenIndex = position31, tokenIndex31
									}
								l32:
									if !_rules[ruleQUARTERS]() {
										goto l30
									}
									{
										add(ruleAction4, position)
									}
									goto l25
								l30:
									position, tokenIndex = position25, tokenIndex25
									if !_rules[ruleLAST]() {
										goto l34
									}
									{
										position35, tokenIndex35 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l35
										}
										goto l36
									l35:
										position, tokenIndex = position35, tokenIndex35
									}
								l36:
									if !_rules[ruleMONTHS]() {
										goto l34
									}
									{
										add(ruleAction5, position)
									}
									goto l25
								l34:
									position, tokenIndex = position25, tokenIndex25
									if !_rules[ruleLAST]() {
										goto l0
									}
									{
										position38, tokenIndex38 := position, tokenIndex
										if !_rules[ruleNumber]() {
											goto l38
										}
										goto l39
									l38:
										position, tokenIndex = position38, tokenIndex38
									}
								l39:
									if !_rules[ruleWEEKS]() {
										goto l0
									}
									{
										add(ruleAction6, position)
									}
								}
							l25:
								add(rulePAST, position24)
							}
						default:
							{
								position41 := position
								{
									position42, tokenIndex42 := position, tokenIndex
									{
										position44, tokenIndex44 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l45
										}
										if !_rules[ruleYEARS]() {
											goto l45
										}
										goto l44
									l45:
										position, tokenIndex = position44, tokenIndex44
										if !_rules[ruleYEARS]() {
											goto l46
										}
										if !_rules[ruleTODATE]() {
											goto l46
										}
										goto l44
									l46:
										position, tokenIndex = position44, tokenIndex44
										if buffer[position] != rune('y') {
											goto l43
										}
										position++
										if buffer[position] != rune('t') {
											goto l43
										}
										position++
										if buffer[position] != rune('d') {
											goto l43
										}
										position++
										if !_rules[rule_]() {
											goto l43
										}
									}
								l44:
									{
										add(ruleAction0, position)
									}
									goto l42
								l43:
									position, tokenIndex = position42, tokenIndex42
									{
										position49, tokenIndex49 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l50
										}
										if !_rules[ruleQUARTERS]() {
											goto l50
										}
										goto l49
									l50:
										position, tokenIndex = position49, tokenIndex49
										if !_rules[ruleQUARTERS]() {
											goto l51
										}
										if !_rules[ruleTODATE]() {
											goto l51
										}
										goto l49
									l51:
										position, tokenIndex = position49, tokenIndex49
										if buffer[position] != rune('q') {
											goto l48
										}
										position++
										if buffer[position] != rune('t') {
											goto l48
										}
										position++
										if buffer[position] != rune('d') {
											goto l48
										}
										position++
										if !_rules[rule_]() {
											goto l48
										}
									}
								l49:
									{
										add(ruleAction1, position)
									}
									goto l42
								l48:
									position, tokenIndex = position42, tokenIndex42
									{
										position53, tokenIndex53 := position, tokenIndex
										if !_rules[ruleCURRENT]() {
											goto l54
										}
										if !_rules[ruleMONTHS]() {
											goto l54
										}
										goto l53
									l54:
										position, tokenIndex = position53, tokenIndex53
										if !_rules[ruleMONTHS]() {
											goto l55
										}
										if !_rules[ruleTODATE]() {
											goto l55
										}
										goto l53
									l55:
										position, tokenIndex = position53, tokenIndex53
										if buffer[position] != rune('m') {
											goto l0
										}
										position++
										if buffer[position] != rune('t') {
											goto l0
										}
										position++
										if buffer[position] != rune('d') {
											goto l0
										}
										position++
										if !_rules[rule_]() {
											goto l0
										}
									}
								l53:
									{
										add(ruleAction2, position)
									}
								}
							l42:
								add(ruleNOW, position41)
							}
						}
					}

					add(ruleExpr, position2)
				}
				{
					position57 := position
					{
						position58, tokenIndex58 := position, tokenIndex
						if !matchDot() {
							goto l58
						}
						goto l0
					l58:
						position, tokenIndex = position58, tokenIndex58
					}
					add(ruleEOF, position57)
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expr <- <((&('a' | 'e' | 'f') EVERYTHING) | (&('n') FUTURE) | (&('l' | 'p') PAST) | (&('c' | 'm' | 'q' | 'y') NOW))> */
		nil,
		/* 2 NOW <- <((((CURRENT YEARS) / (YEARS TODATE) / ('y' 't' 'd' _)) Action0) / (((CURRENT QUARTERS) / (QUARTERS TODATE) / ('q' 't' 'd' _)) Action1) / (((CURRENT MONTHS) / (MONTHS TODATE) / ('m' 't' 'd' _)) Action2))> */
		nil,
		/* 3 PAST <- <((LAST Number? YEARS Action3) / (LAST Number? QUARTERS Action4) / (LAST Number? MONTHS Action5) / (LAST Number? WEEKS Action6))> */
		nil,
		/* 4 FUTURE <- <((NEXT Number? YEARS Action7) / (NEXT Number? QUARTERS Action8) / (NEXT Number? MONTHS Action9) / (NEXT Number? WEEKS Action10))> */
		nil,
		/* 5 EVERYTHING <- <(((&('e') ('e' 'v' 'e' 'r' 'y' 't' 'h' 'i' 'n' 'g')) | (&('f') ('f' 'o' 'r' 'e' 'v' 'e' 'r')) | (&('a') ('a' 'l' 'l' ' ' 't' 'i' 'm' 'e'))) _ Action11)> */
		nil,
		/* 6 Number <- <(('t' 'w' 'o' _ Action14) / ('t' 'h' 'r' 'e' 'e' _ Action15) / ('f' 'o' 'u' 'r' _ Action16) / ('f' 'i' 'v' 'e' _ Action17) / ('s' 'i' 'x' _ Action18) / ('s' 'e' 'v' 'e' 'n' _ Action19) / ('e' 'i' 'g' 'h' 't' _ Action20) / ('n' 'i' 'n' 'e' _ Action21) / ('t' 'e' 'n' _ Action22) / ('e' 'l' 'e' 'v' 'e' 'n' _ Action23) / ('t' 'w' 'e' 'l' 'v' 'e' _ Action24) / ('t' 'h' 'i' 'r' 't' 'e' 'e' 'n' _ Action25) / ('f' 'o' 'u' 'r' 't' 'e' 'e' 'n' _ Action26) / ('s' 'i' 'x' 't' 'e' 'e' 'n' _ Action28) / ((&('t') ('t' 'w' 'e' 'n' 't' 'y' _ Action32)) | (&('n') ('n' 'i' 'n' 'e' 't' 'e' 'e' 'n' _ Action31)) | (&('e') ('e' 'i' 'g' 'h' 't' 't' 'e' 'e' 'n' _ Action30)) | (&('s') ('s' 'e' 'v' 'e' 'n' 't' 'e' 'e' 'n' _ Action29)) | (&('f') ('f' 'i' 'f' 't' 'e' 'e' 'n' _ Action27)) | (&('o') ('o' 'n' 'e' _ Action13)) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') (<[0-9]+> _ Action12))))> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l67
					}
					position++
					if buffer[position] != rune('w') {
						goto l67
					}
					position++
					if buffer[position] != rune('o') {
						goto l67
					}
					position++
					if !_rules[rule_]() {
						goto l67
					}
					{
						add(ruleAction14, position)
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('t') {
						goto l69
					}
					position++
					if buffer[position] != rune('h') {
						goto l69
					}
					position++
					if buffer[position] != rune('r') {
						goto l69
					}
					position++
					if buffer[position] != rune('e') {
						goto l69
					}
					position++
					if buffer[position] != rune('e') {
						goto l69
					}
					position++
					if !_rules[rule_]() {
						goto l69
					}
					{
						add(ruleAction15, position)
					}
					goto l66
				l69:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('f') {
						goto l71
					}
					position++
					if buffer[position] != rune('o') {
						goto l71
					}
					position++
					if buffer[position] != rune('u') {
						goto l71
					}
					position++
					if buffer[position] != rune('r') {
						goto l71
					}
					position++
					if !_rules[rule_]() {
						goto l71
					}
					{
						add(ruleAction16, position)
					}
					goto l66
				l71:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('f') {
						goto l73
					}
					position++
					if buffer[position] != rune('i') {
						goto l73
					}
					position++
					if buffer[position] != rune('v') {
						goto l73
					}
					position++
					if buffer[position] != rune('e') {
						goto l73
					}
					position++
					if !_rules[rule_]() {
						goto l73
					}
					{
						add(ruleAction17, position)
					}
					goto l66
				l73:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('s') {
						goto l75
					}
					position++
					if buffer[position] != rune('i') {
						goto l75
					}
					position++
					if buffer[position] != rune('x') {
						goto l75
					}
					position++
					if !_rules[rule_]() {
						goto l75
					}
					{
						add(ruleAction18, position)
					}
					goto l66
				l75:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('s') {
						goto l77
					}
					position++
					if buffer[position] != rune('e') {
						goto l77
					}
					position++
					if buffer[position] != rune('v') {
						goto l77
					}
					position++
					if buffer[position] != rune('e') {
						goto l77
					}
					position++
					if buffer[position] != rune('n') {
						goto l77
					}
					position++
					if !_rules[rule_]() {
						goto l77
					}
					{
						add(ruleAction19, position)
					}
					goto l66
				l77:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('e') {
						goto l79
					}
					position++
					if buffer[position] != rune('i') {
						goto l79
					}
					position++
					if buffer[position] != rune('g') {
						goto l79
					}
					position++
					if buffer[position] != rune('h') {
						goto l79
					}
					position++
					if buffer[position] != rune('t') {
						goto l79
					}
					position++
					if !_rules[rule_]() {
						goto l79
					}
					{
						add(ruleAction20, position)
					}
					goto l66
				l79:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('n') {
						goto l81
					}
					position++
					if buffer[position] != rune('i') {
						goto l81
					}
					position++
					if buffer[position] != rune('n') {
						goto l81
					}
					position++
					if buffer[position] != rune('e') {
						goto l81
					}
					position++
					if !_rules[rule_]() {
						goto l81
					}
					{
						add(ruleAction21, position)
					}
					goto l66
				l81:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('t') {
						goto l83
					}
					position++
					if buffer[position] != rune('e') {
						goto l83
					}
					position++
					if buffer[position] != rune('n') {
						goto l83
					}
					position++
					if !_rules[rule_]() {
						goto l83
					}
					{
						add(ruleAction22, position)
					}
					goto l66
				l83:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('e') {
						goto l85
					}
					position++
					if buffer[position] != rune('l') {
						goto l85
					}
					position++
					if buffer[position] != rune('e') {
						goto l85
					}
					position++
					if buffer[position] != rune('v') {
						goto l85
					}
					position++
					if buffer[position] != rune('e') {
						goto l85
					}
					position++
					if buffer[position] != rune('n') {
						goto l85
					}
					position++
					if !_rules[rule_]() {
						goto l85
					}
					{
						add(ruleAction23, position)
					}
					goto l66
				l85:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('t') {
						goto l87
					}
					position++
					if buffer[position] != rune('w') {
						goto l87
					}
					position++
					if buffer[position] != rune('e') {
						goto l87
					}
					position++
					if buffer[position] != rune('l') {
						goto l87
					}
					position++
					if buffer[position] != rune('v') {
						goto l87
					}
					position++
					if buffer[position] != rune('e') {
						goto l87
					}
					position++
					if !_rules[rule_]() {
						goto l87
					}
					{
						add(ruleAction24, position)
					}
					goto l66
				l87:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('t') {
						goto l89
					}
					position++
					if buffer[position] != rune('h') {
						goto l89
					}
					position++
					if buffer[position] != rune('i') {
						goto l89
					}
					position++
					if buffer[position] != rune('r') {
						goto l89
					}
					position++
					if buffer[position] != rune('t') {
						goto l89
					}
					position++
					if buffer[position] != rune('e') {
						goto l89
					}
					position++
					if buffer[position] != rune('e') {
						goto l89
					}
					position++
					if buffer[position] != rune('n') {
						goto l89
					}
					position++
					if !_rules[rule_]() {
						goto l89
					}
					{
						add(ruleAction25, position)
					}
					goto l66
				l89:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('f') {
						goto l91
					}
					position++
					if buffer[position] != rune('o') {
						goto l91
					}
					position++
					if buffer[position] != rune('u') {
						goto l91
					}
					position++
					if buffer[position] != rune('r') {
						goto l91
					}
					position++
					if buffer[position] != rune('t') {
						goto l91
					}
					position++
					if buffer[position] != rune('e') {
						goto l91
					}
					position++
					if buffer[position] != rune('e') {
						goto l91
					}
					position++
					if buffer[position] != rune('n') {
						goto l91
					}
					position++
					if !_rules[rule_]() {
						goto l91
					}
					{
						add(ruleAction26, position)
					}
					goto l66
				l91:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('s') {
						goto l93
					}
					position++
					if buffer[position] != rune('i') {
						goto l93
					}
					position++
					if buffer[position] != rune('x') {
						goto l93
					}
					position++
					if buffer[position] != rune('t') {
						goto l93
					}
					position++
					if buffer[position] != rune('e') {
						goto l93
					}
					position++
					if buffer[position] != rune('e') {
						goto l93
					}
					position++
					if buffer[position] != rune('n') {
						goto l93
					}
					position++
					if !_rules[rule_]() {
						goto l93
					}
					{
						add(ruleAction28, position)
					}
					goto l66
				l93:
					position, tokenIndex = position66, tokenIndex66
					{
						switch buffer[position] {
						case 't':
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('w') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('y') {
								goto l64
							}
							position++
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction32, position)
							}
						case 'n':
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if buffer[position] != rune('i') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction31, position)
							}
						case 'e':
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('i') {
								goto l64
							}
							position++
							if buffer[position] != rune('g') {
								goto l64
							}
							position++
							if buffer[position] != rune('h') {
								goto l64
							}
							position++
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction30, position)
							}
						case 's':
							if buffer[position] != rune('s') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('v') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction29, position)
							}
						case 'f':
							if buffer[position] != rune('f') {
								goto l64
							}
							position++
							if buffer[position] != rune('i') {
								goto l64
							}
							position++
							if buffer[position] != rune('f') {
								goto l64
							}
							position++
							if buffer[position] != rune('t') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction27, position)
							}
						case 'o':
							if buffer[position] != rune('o') {
								goto l64
							}
							position++
							if buffer[position] != rune('n') {
								goto l64
							}
							position++
							if buffer[position] != rune('e') {
								goto l64
							}
							position++
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction13, position)
							}
						default:
							{
								position102 := position
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l64
								}
								position++
							l103:
								{
									position104, tokenIndex104 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l104
									}
									position++
									goto l103
								l104:
									position, tokenIndex = position104, tokenIndex104
								}
								add(rulePegText, position102)
							}
							if !_rules[rule_]() {
								goto l64
							}
							{
								add(ruleAction12, position)
							}
						}
					}

				}
			l66:
				add(ruleNumber, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 7 YEARS <- <('y' 'e' 'a' 'r' 's'? _)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				if buffer[position] != rune('y') {
					goto l106
				}
				position++
				if buffer[position] != rune('e') {
					goto l106
				}
				position++
				if buffer[position] != rune('a') {
					goto l106
				}
				position++
				if buffer[position] != rune('r') {
					goto l106
				}
				position++
				{
					position108, tokenIndex108 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l108
					}
					position++
					goto l109
				l108:
					position, tokenIndex = position108, tokenIndex108
				}
			l109:
				if !_rules[rule_]() {
					goto l106
				}
				add(ruleYEARS, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 8 QUARTERS <- <('q' 'u' 'a' 'r' 't' 'e' 'r' 's'? _)> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if buffer[position] != rune('q') {
					goto l110
				}
				position++
				if buffer[position] != rune('u') {
					goto l110
				}
				position++
				if buffer[position] != rune('a') {
					goto l110
				}
				position++
				if buffer[position] != rune('r') {
					goto l110
				}
				position++
				if buffer[position] != rune('t') {
					goto l110
				}
				position++
				if buffer[position] != rune('e') {
					goto l110
				}
				position++
				if buffer[position] != rune('r') {
					goto l110
				}
				position++
				{
					position112, tokenIndex112 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l112
					}
					position++
					goto l113
				l112:
					position, tokenIndex = position112, tokenIndex112
				}
			l113:
				if !_rules[rule_]() {
					goto l110
				}
				add(ruleQUARTERS, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 MONTHS <- <('m' 'o' 'n' 't' 'h' 's'? _)> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				if buffer[position] != rune('m') {
					goto l114
				}
				position++
				if buffer[position] != rune('o') {
					goto l114
				}
				position++
				if buffer[position] != rune('n') {
					goto l114
				}
				position++
				if buffer[position] != rune('t') {
					goto l114
				}
				position++
				if buffer[position] != rune('h') {
					goto l114
				}
				position++
				{
					position116, tokenIndex116 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l116
					}
					position++
					goto l117
				l116:
					position, tokenIndex = position116, tokenIndex116
				}
			l117:
				if !_rules[rule_]() {
					goto l114
				}
				add(ruleMONTHS, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 10 WEEKS <- <('w' 'e' 'e' 'k' 's'? _)> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				if buffer[position] != rune('w') {
					goto l118
				}
				position++
				if buffer[position] != rune('e') {
					goto l118
				}
				position++
				if buffer[position] != rune('e') {
					goto l118
				}
				position++
				if buffer[position] != rune('k') {
					goto l118
				}
				position++
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l120
					}
					position++
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				if !_rules[rule_]() {
					goto l118
				}
				add(ruleWEEKS, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 11 LAST <- <((('l' 'a' 's' 't') / ('p' 'r' 'e' 'v' 'i' 'o' 'u' 's') / ('p' 'a' 's' 't')) _)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l125
					}
					position++
					if buffer[position] != rune('a') {
						goto l125
					}
					position++
					if buffer[position] != rune('s') {
						goto l125
					}
					position++
					if buffer[position] != rune('t') {
						goto l125
					}
					position++
					goto l124
				l125:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('p') {
						goto l126
					}
					position++
					if buffer[position] != rune('r') {
						goto l126
					}
					position++
					if buffer[position] != rune('e') {
						goto l126
					}
					position++
					if buffer[position] != rune('v') {
						goto l126
					}
					position++
					if buffer[position] != rune('i') {
						goto l126
					}
					position++
					if buffer[position] != rune('o') {
						goto l126
					}
					position++
					if buffer[position] != rune('u') {
						goto l126
					}
					position++
					if buffer[position] != rune('s') {
						goto l126
					}
					position++
					goto l124
				l126:
					position, tokenIndex = position124, tokenIndex124
					if buffer[position] != rune('p') {
						goto l122
					}
					position++
					if buffer[position] != rune('a') {
						goto l122
					}
					position++
					if buffer[position] != rune('s') {
						goto l122
					}
					position++
					if buffer[position] != rune('t') {
						goto l122
					}
					position++
				}
			l124:
				if !_rules[rule_]() {
					goto l122
				}
				add(ruleLAST, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 12 CURRENT <- <('c' 'u' 'r' 'r' 'e' 'n' 't' _)> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				if buffer[position] != rune('c') {
					goto l127
				}
				position++
				if buffer[position] != rune('u') {
					goto l127
				}
				position++
				if buffer[position] != rune('r') {
					goto l127
				}
				position++
				if buffer[position] != rune('r') {
					goto l127
				}
				position++
				if buffer[position] != rune('e') {
					goto l127
				}
				position++
				if buffer[position] != rune('n') {
					goto l127
				}
				position++
				if buffer[position] != rune('t') {
					goto l127
				}
				position++
				if !_rules[rule_]() {
					goto l127
				}
				add(ruleCURRENT, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 13 TODATE <- <('t' 'o' ' ' 'd' 'a' 't' 'e' _)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if buffer[position] != rune('t') {
					goto l129
				}
				position++
				if buffer[position] != rune('o') {
					goto l129
				}
				position++
				if buffer[position] != rune(' ') {
					goto l129
				}
				position++
				if buffer[position] != rune('d') {
					goto l129
				}
				position++
				if buffer[position] != rune('a') {
					goto l129
				}
				position++
				if buffer[position] != rune('t') {
					goto l129
				}
				position++
				if buffer[position] != rune('e') {
					goto l129
				}
				position++
				if !_rules[rule_]() {
					goto l129
				}
				add(ruleTODATE, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 14 NEXT <- <('n' 'e' 'x' 't' _)> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				if buffer[position] != rune('n') {
					goto l131
				}
				position++
				if buffer[position] != rune('e') {
					goto l131
				}
				position++
				if buffer[position] != rune('x') {
					goto l131
				}
				position++
				if buffer[position] != rune('t') {
					goto l131
				}
				position++
				if !_rules[rule_]() {
					goto l131
				}
				add(ruleNEXT, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 15 _ <- <Whitespace*> */
		func() bool {
			{
				position134 := position
			l135:
				{
					position136, tokenIndex136 := position, tokenIndex
					{
						position137 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l136
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l136
								}
								position++
							default:
								{
									position139 := position
									{
										position140, tokenIndex140 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l141
										}
										position++
										if buffer[position] != rune('\n') {
											goto l141
										}
										position++
										goto l140
									l141:
										position, tokenIndex = position140, tokenIndex140
										if buffer[position] != rune('\n') {
											goto l142
										}
										position++
										goto l140
									l142:
										position, tokenIndex = position140, tokenIndex140
										if buffer[position] != rune('\r') {
											goto l136
										}
										position++
									}
								l140:
									add(ruleEOL, position139)
								}
							}
						}

						add(ruleWhitespace, position137)
					}
					goto l135
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
				add(rule_, position134)
			}
			return true
		},
		/* 16 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 17 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 18 EOF <- <!.> */
		nil,
		/* 20 Action0 <- <{
			p.start, p.end = boundsYear(p.currentTime)
		}> */
		nil,
		/* 21 Action1 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
		}> */
		nil,
		/* 22 Action2 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
		}> */
		nil,
		/* 23 Action3 <- <{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}
		}> */
		nil,
		/* 24 Action4 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -3*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0,-3,0)
			}
		}> */
		nil,
		/* 25 Action5 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}
		}> */
		nil,
		/* 26 Action6 <- <{
			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, 0, -7*(p.number-1))
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, 0, -7)
			}
		}> */
		nil,
		/* 27 Action7 <- <{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}
		}> */
		nil,
		/* 28 Action8 <- <{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0,3*(p.number),0)
			} else {
				p.start = p.start.AddDate(0,3,0)
				p.end = p.start.AddDate(0,3,0)
			}
		}> */
		nil,
		/* 29 Action9 <- <{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}
		}> */
		nil,
		/* 30 Action10 <- <{
			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 0, 7*p.number)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 0, 7)
			}
		}> */
		nil,
		/* 31 Action11 <- <{
			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 -1)
		}> */
		nil,
		nil,
		/* 33 Action12 <- <{ n, _ := strconv.Atoi(text); p.number = n}> */
		nil,
		/* 34 Action13 <- <{ p.number = 1 }> */
		nil,
		/* 35 Action14 <- <{ p.number = 2 }> */
		nil,
		/* 36 Action15 <- <{ p.number = 3 }> */
		nil,
		/* 37 Action16 <- <{ p.number = 4 }> */
		nil,
		/* 38 Action17 <- <{ p.number = 5 }> */
		nil,
		/* 39 Action18 <- <{ p.number = 6 }> */
		nil,
		/* 40 Action19 <- <{ p.number = 7 }> */
		nil,
		/* 41 Action20 <- <{ p.number = 8 }> */
		nil,
		/* 42 Action21 <- <{ p.number = 9 }> */
		nil,
		/* 43 Action22 <- <{ p.number = 10 }> */
		nil,
		/* 44 Action23 <- <{ p.number = 11 }> */
		nil,
		/* 45 Action24 <- <{ p.number = 12 }> */
		nil,
		/* 46 Action25 <- <{ p.number = 13 }> */
		nil,
		/* 47 Action26 <- <{ p.number = 14 }> */
		nil,
		/* 48 Action27 <- <{ p.number = 15 }> */
		nil,
		/* 49 Action28 <- <{ p.number = 16 }> */
		nil,
		/* 50 Action29 <- <{ p.number = 17 }> */
		nil,
		/* 51 Action30 <- <{ p.number = 18 }> */
		nil,
		/* 52 Action31 <- <{ p.number = 19 }> */
		nil,
		/* 53 Action32 <- <{ p.number = 20 }> */
		nil,
	}
	p.rules = _rules
	return nil
}
