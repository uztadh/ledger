package pdr

import "time"

type parser Peg {
	currentTime time.Time
	start time.Time
	end time.Time
	number int
}

Query
	<- Expr EOF

Expr
	<- NOW
	/ PAST
	/ FUTURE
	/ EVERYTHING

NOW
	<- (CURRENT YEARS / YEARS TODATE / 'ytd' _)
		{
			p.start, p.end = boundsYear(p.currentTime)
		}
	/ (CURRENT QUARTERS / QUARTERS TODATE / 'qtd' _)
		{
			p.start, p.end = boundsQuarter(p.currentTime)
		}
	/ (CURRENT MONTHS / MONTHS TODATE / 'mtd' _)
		{
			p.start, p.end = boundsMonth(p.currentTime)
		}

PAST
	<- LAST Number? YEARS
		{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(-1*(p.number-1), 0, 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(-1, 0, 0)
			}
		}
	/ LAST Number? QUARTERS
		{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -3*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0,-3,0)
			}
		}
	/ LAST Number? MONTHS
		{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, -1*(p.number-1), 0)
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, -1, 0)
			}
		}
	/ LAST Number? WEEKS
		{
			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.start = p.start.AddDate(0, 0, -7*(p.number-1))
			} else {
				p.end = p.start
				p.start = p.start.AddDate(0, 0, -7)
			}
		}

FUTURE
	<- NEXT Number? YEARS
		{
			p.start, p.end = boundsYear(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(p.number, 0, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(1, 0, 0)
			}
		}
	/ NEXT Number? QUARTERS
		{
			p.start, p.end = boundsQuarter(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0,3*(p.number),0)
			} else {
				p.start = p.start.AddDate(0,3,0)
				p.end = p.start.AddDate(0,3,0)
			}
		}
	/ NEXT Number? MONTHS
		{
			p.start, p.end = boundsMonth(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, p.number, 0)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 1, 0)
			}
		}
	/ NEXT Number? WEEKS
		{
			p.start, p.end = boundsWeek(p.currentTime)
			if p.number > 1 {
				p.end = p.start.AddDate(0, 0, 7*p.number)
			} else {
				p.start = p.end
				p.end = p.start.AddDate(0, 0, 7)
			}
		}

EVERYTHING
	<- ('all time' / 'forever' / 'everything') _
		{
			p.start = time.Time{}
			p.end = p.currentTime.Add(1<<63 -1)
		}

Number
	<- < [0-9]+ > _ { n, _ := strconv.Atoi(text); p.number = n}
	/ 'one' _       { p.number = 1 }
	/ 'two' _       { p.number = 2 }
	/ 'three' _     { p.number = 3 }
	/ 'four' _      { p.number = 4 }
	/ 'five' _      { p.number = 5 }
	/ 'six' _       { p.number = 6 }
	/ 'seven' _     { p.number = 7 }
	/ 'eight' _     { p.number = 8 }
	/ 'nine' _      { p.number = 9 }
	/ 'ten' _       { p.number = 10 }
	/ 'eleven' _    { p.number = 11 }
	/ 'twelve' _    { p.number = 12 }
	/ 'thirteen' _    { p.number = 13 }
	/ 'fourteen' _    { p.number = 14 }
	/ 'fifteen' _    { p.number = 15 }
	/ 'sixteen' _    { p.number = 16 }
	/ 'seventeen' _    { p.number = 17 }
	/ 'eightteen' _    { p.number = 18 }
	/ 'nineteen' _    { p.number = 19 }
	/ 'twenty' _    { p.number = 20 }

YEARS	<- 'year' 's'? _
QUARTERS	<- 'quarter' 's'? _
MONTHS	<- 'month' 's'? _
WEEKS	<- 'week' 's'? _

LAST	<- ('last' / 'previous' / 'past') _
CURRENT	<- 'current' _
TODATE	<- 'to date' _
NEXT	<- ('next') _

_
	<- Whitespace*

Whitespace
	<- ' ' / '\t' / EOL

EOL
	<- '\r\n' / '\n' / '\r'

EOF
	<- !.
